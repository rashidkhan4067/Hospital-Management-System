# Generated by Django 4.2 on 2025-07-23 05:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('doctors', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('patients', '0001_initial'),
        ('appointments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('action', models.CharField(choices=[('CREATE', 'Created'), ('UPDATE', 'Updated'), ('DELETE', 'Deleted'), ('VIEW', 'Viewed'), ('PRINT', 'Printed'), ('EXPORT', 'Exported'), ('SHARE', 'Shared')], max_length=10)),
                ('description', models.TextField(blank=True)),
                ('session_key', models.CharField(blank=True, max_length=40)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('changes', models.JSONField(blank=True, default=dict)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ImagingStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_id', models.CharField(editable=False, max_length=12, unique=True)),
                ('study_type', models.CharField(choices=[('XRAY', 'X-Ray'), ('CT', 'CT Scan'), ('MRI', 'MRI'), ('ULTRASOUND', 'Ultrasound'), ('MAMMOGRAPHY', 'Mammography'), ('NUCLEAR', 'Nuclear Medicine'), ('PET', 'PET Scan'), ('FLUOROSCOPY', 'Fluoroscopy'), ('ANGIOGRAPHY', 'Angiography')], max_length=20)),
                ('body_part', models.CharField(max_length=100)),
                ('clinical_indication', models.TextField()),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('REPORTED', 'Reported'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', max_length=15)),
                ('scheduled_date', models.DateTimeField()),
                ('performed_date', models.DateTimeField(blank=True, null=True)),
                ('contrast_used', models.BooleanField(default=False)),
                ('contrast_type', models.CharField(blank=True, max_length=100)),
                ('technique', models.TextField(blank=True)),
                ('findings', models.TextField(blank=True)),
                ('impression', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('report_date', models.DateTimeField(blank=True, null=True)),
                ('dicom_study_uid', models.CharField(blank=True, max_length=100)),
                ('image_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='InsuranceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('website', models.URLField(blank=True)),
                ('address_line1', models.CharField(blank=True, max_length=200)),
                ('address_line2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=50)),
                ('zip_code', models.CharField(blank=True, max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('contract_start_date', models.DateField(blank=True, null=True)),
                ('contract_end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LabOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.CharField(editable=False, max_length=12, unique=True)),
                ('status', models.CharField(choices=[('ORDERED', 'Ordered'), ('COLLECTED', 'Sample Collected'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='ORDERED', max_length=15)),
                ('priority', models.CharField(choices=[('ROUTINE', 'Routine'), ('URGENT', 'Urgent'), ('STAT', 'STAT')], default='ROUTINE', max_length=10)),
                ('clinical_notes', models.TextField(blank=True)),
                ('special_instructions', models.TextField(blank=True)),
                ('ordered_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('collected_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-ordered_at'],
            },
        ),
        migrations.CreateModel(
            name='LabOrderTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instructions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LabResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_id', models.CharField(editable=False, max_length=12, unique=True)),
                ('numeric_value', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('text_value', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PRELIMINARY', 'Preliminary'), ('FINAL', 'Final'), ('CORRECTED', 'Corrected'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=15)),
                ('abnormal_flag', models.CharField(choices=[('NORMAL', 'Normal'), ('HIGH', 'High'), ('LOW', 'Low'), ('CRITICAL_HIGH', 'Critical High'), ('CRITICAL_LOW', 'Critical Low'), ('ABNORMAL', 'Abnormal')], default='NORMAL', max_length=15)),
                ('reference_range_min', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('reference_range_max', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('reference_range_text', models.CharField(blank=True, max_length=200)),
                ('unit', models.CharField(blank=True, max_length=50)),
                ('technician_notes', models.TextField(blank=True)),
                ('pathologist_notes', models.TextField(blank=True)),
                ('performed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-performed_at'],
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('category', models.CharField(choices=[('BLOOD', 'Blood Tests'), ('URINE', 'Urine Tests'), ('STOOL', 'Stool Tests'), ('MICROBIOLOGY', 'Microbiology'), ('CHEMISTRY', 'Clinical Chemistry'), ('HEMATOLOGY', 'Hematology'), ('IMMUNOLOGY', 'Immunology'), ('PATHOLOGY', 'Pathology'), ('GENETICS', 'Genetic Testing')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('reference_range_min', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('reference_range_max', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('reference_range_text', models.CharField(blank=True, max_length=200)),
                ('unit', models.CharField(blank=True, max_length=50)),
                ('specimen_type', models.CharField(blank=True, max_length=100)),
                ('preparation_instructions', models.TextField(blank=True)),
                ('turnaround_time_hours', models.PositiveIntegerField(default=24)),
                ('cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('is_active', models.BooleanField(default=True)),
                ('requires_fasting', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_id', models.CharField(editable=False, max_length=12, unique=True)),
                ('record_type', models.CharField(choices=[('CONSULTATION', 'Consultation'), ('DIAGNOSIS', 'Diagnosis'), ('TREATMENT', 'Treatment'), ('SURGERY', 'Surgery'), ('EMERGENCY', 'Emergency'), ('FOLLOW_UP', 'Follow-up'), ('PREVENTIVE', 'Preventive Care')], default='CONSULTATION', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent'), ('CRITICAL', 'Critical')], default='MEDIUM', max_length=10)),
                ('chief_complaint', models.TextField(help_text="Patient's main concern or reason for visit")),
                ('history_of_present_illness', models.TextField(blank=True)),
                ('physical_examination', models.TextField(blank=True)),
                ('assessment', models.TextField(help_text="Doctor's assessment and diagnosis")),
                ('plan', models.TextField(help_text='Treatment plan and recommendations')),
                ('notes', models.TextField(blank=True, help_text='Additional notes and observations')),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('visit_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_confidential', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-visit_date'],
            },
        ),
        migrations.CreateModel(
            name='MedicalRecordCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color_code', models.CharField(default='#3B82F6', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Medical Record Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('generic_name', models.CharField(blank=True, max_length=200)),
                ('brand_names', models.TextField(blank=True, help_text='Comma-separated brand names')),
                ('medication_type', models.CharField(choices=[('TABLET', 'Tablet'), ('CAPSULE', 'Capsule'), ('LIQUID', 'Liquid'), ('INJECTION', 'Injection'), ('TOPICAL', 'Topical'), ('INHALER', 'Inhaler'), ('DROPS', 'Drops'), ('PATCH', 'Patch')], max_length=20)),
                ('strength', models.CharField(help_text='e.g., 500mg, 10ml', max_length=50)),
                ('active_ingredients', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('common_uses', models.TextField(blank=True)),
                ('side_effects', models.TextField(blank=True)),
                ('contraindications', models.TextField(blank=True)),
                ('drug_interactions', models.TextField(blank=True)),
                ('is_controlled_substance', models.BooleanField(default=False)),
                ('requires_prescription', models.BooleanField(default=True)),
                ('fda_approved', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_id', models.CharField(editable=False, max_length=12, unique=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('DISCONTINUED', 'Discontinued'), ('EXPIRED', 'Expired')], default='ACTIVE', max_length=15)),
                ('prescribed_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('general_instructions', models.TextField(blank=True)),
                ('special_instructions', models.TextField(blank=True)),
                ('warnings', models.TextField(blank=True)),
                ('is_controlled_substance', models.BooleanField(default=False)),
                ('refills_allowed', models.PositiveIntegerField(default=0)),
                ('refills_used', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='doctors.doctorprofile')),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='medical_records.medicalrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='patients.patientprofile')),
            ],
            options={
                'ordering': ['-prescribed_date'],
            },
        ),
        migrations.CreateModel(
            name='VitalSigns',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Temperature in Fahrenheit', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(90.0), django.core.validators.MaxValueValidator(110.0)])),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)])),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)])),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Beats per minute', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(250)])),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Breaths per minute', null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('oxygen_saturation', models.PositiveIntegerField(blank=True, help_text='Oxygen saturation percentage', null=True, validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(100)])),
                ('weight', models.DecimalField(blank=True, decimal_places=1, help_text='Weight in pounds', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(999.9)])),
                ('height', models.PositiveIntegerField(blank=True, help_text='Height in inches', null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(120)])),
                ('pain_scale', models.PositiveIntegerField(blank=True, help_text='Pain scale 0-10', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('measured_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True)),
                ('measured_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_vitals', to=settings.AUTH_USER_MODEL)),
                ('medical_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='medical_records.medicalrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='patients.patientprofile')),
            ],
            options={
                'ordering': ['-measured_at'],
            },
        ),
        migrations.CreateModel(
            name='PrescriptionMedication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosage', models.CharField(help_text='e.g., 1 tablet, 5ml', max_length=100)),
                ('frequency', models.CharField(choices=[('ONCE_DAILY', 'Once daily'), ('TWICE_DAILY', 'Twice daily'), ('THREE_TIMES_DAILY', 'Three times daily'), ('FOUR_TIMES_DAILY', 'Four times daily'), ('EVERY_4_HOURS', 'Every 4 hours'), ('EVERY_6_HOURS', 'Every 6 hours'), ('EVERY_8_HOURS', 'Every 8 hours'), ('EVERY_12_HOURS', 'Every 12 hours'), ('AS_NEEDED', 'As needed'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly')], max_length=20)),
                ('duration_days', models.PositiveIntegerField(blank=True, null=True)),
                ('instructions', models.TextField(blank=True, help_text='Specific instructions for this medication')),
                ('take_with_food', models.BooleanField(default=False)),
                ('quantity_prescribed', models.PositiveIntegerField(help_text='Total quantity prescribed')),
                ('quantity_dispensed', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('medication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='medical_records.medication')),
                ('prescription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='medical_records.prescription')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PatientInsurance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coverage_type', models.CharField(choices=[('PRIMARY', 'Primary'), ('SECONDARY', 'Secondary'), ('TERTIARY', 'Tertiary')], default='PRIMARY', max_length=10)),
                ('policy_number', models.CharField(max_length=50)),
                ('group_number', models.CharField(blank=True, max_length=50)),
                ('member_id', models.CharField(max_length=50)),
                ('policyholder_name', models.CharField(max_length=200)),
                ('relationship_to_patient', models.CharField(choices=[('SELF', 'Self'), ('SPOUSE', 'Spouse'), ('CHILD', 'Child'), ('PARENT', 'Parent'), ('OTHER', 'Other')], default='SELF', max_length=10)),
                ('policyholder_dob', models.DateField(blank=True, null=True)),
                ('effective_date', models.DateField()),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('copay_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('deductible_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('out_of_pocket_max', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('insurance_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_coverages', to='medical_records.insuranceprovider')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='insurance_coverages', to='patients.patientprofile')),
            ],
            options={
                'ordering': ['coverage_type', '-effective_date'],
            },
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['name'], name='medical_rec_name_ac5f14_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['generic_name'], name='medical_rec_generic_e24f44_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['medication_type'], name='medical_rec_medicat_9ec62a_idx'),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='appointment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_records', to='appointments.appointment'),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medical_records.medicalrecordcategory'),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_medical_records', to='doctors.doctorprofile'),
        ),
        migrations.AddField(
            model_name='medicalrecord',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_medical_records', to='patients.patientprofile'),
        ),
        migrations.AddIndex(
            model_name='labtest',
            index=models.Index(fields=['code'], name='medical_rec_code_066226_idx'),
        ),
        migrations.AddIndex(
            model_name='labtest',
            index=models.Index(fields=['category'], name='medical_rec_categor_ad8408_idx'),
        ),
        migrations.AddField(
            model_name='labresult',
            name='lab_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='medical_records.laborder'),
        ),
        migrations.AddField(
            model_name='labresult',
            name='lab_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='medical_records.labtest'),
        ),
        migrations.AddField(
            model_name='labresult',
            name='performed_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_lab_results', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='labresult',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_lab_results', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='labordertest',
            name='lab_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='medical_records.laborder'),
        ),
        migrations.AddField(
            model_name='labordertest',
            name='lab_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='medical_records.labtest'),
        ),
        migrations.AddField(
            model_name='laborder',
            name='collected_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collected_lab_orders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='laborder',
            name='doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_orders', to='doctors.doctorprofile'),
        ),
        migrations.AddField(
            model_name='laborder',
            name='medical_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_orders', to='medical_records.medicalrecord'),
        ),
        migrations.AddField(
            model_name='laborder',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_orders', to='patients.patientprofile'),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='medical_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_studies', to='medical_records.medicalrecord'),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='ordering_doctor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ordered_imaging_studies', to='doctors.doctorprofile'),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imaging_studies', to='patients.patientprofile'),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='radiologist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='interpreted_imaging_studies', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='imagingstudy',
            name='technologist',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_imaging_studies', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='auditlog',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='auditlog',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='vitalsigns',
            index=models.Index(fields=['patient', '-measured_at'], name='medical_rec_patient_d68b8f_idx'),
        ),
        migrations.AddIndex(
            model_name='vitalsigns',
            index=models.Index(fields=['medical_record'], name='medical_rec_medical_cf6b77_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='prescriptionmedication',
            unique_together={('prescription', 'medication')},
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['patient', '-prescribed_date'], name='medical_rec_patient_6143a5_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['doctor', '-prescribed_date'], name='medical_rec_doctor__37cda4_idx'),
        ),
        migrations.AddIndex(
            model_name='prescription',
            index=models.Index(fields=['status'], name='medical_rec_status_ffc54a_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinsurance',
            index=models.Index(fields=['patient', 'coverage_type'], name='medical_rec_patient_814685_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinsurance',
            index=models.Index(fields=['policy_number'], name='medical_rec_policy__87b49d_idx'),
        ),
        migrations.AddIndex(
            model_name='patientinsurance',
            index=models.Index(fields=['member_id'], name='medical_rec_member__a44f3d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='patientinsurance',
            unique_together={('patient', 'coverage_type', 'insurance_provider')},
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['patient', '-visit_date'], name='medical_rec_patient_89342e_idx'),
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['doctor', '-visit_date'], name='medical_rec_doctor__5e94e2_idx'),
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['record_type'], name='medical_rec_record__be12f7_idx'),
        ),
        migrations.AddIndex(
            model_name='medicalrecord',
            index=models.Index(fields=['priority'], name='medical_rec_priorit_10900b_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['lab_order'], name='medical_rec_lab_ord_b5bb27_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['lab_test'], name='medical_rec_lab_tes_b728ee_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['status'], name='medical_rec_status_b07e99_idx'),
        ),
        migrations.AddIndex(
            model_name='labresult',
            index=models.Index(fields=['abnormal_flag'], name='medical_rec_abnorma_0dab12_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='labordertest',
            unique_together={('lab_order', 'lab_test')},
        ),
        migrations.AddIndex(
            model_name='laborder',
            index=models.Index(fields=['patient', '-ordered_at'], name='medical_rec_patient_6b4748_idx'),
        ),
        migrations.AddIndex(
            model_name='laborder',
            index=models.Index(fields=['doctor', '-ordered_at'], name='medical_rec_doctor__c87326_idx'),
        ),
        migrations.AddIndex(
            model_name='laborder',
            index=models.Index(fields=['status'], name='medical_rec_status_a9e1b9_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['patient', '-scheduled_date'], name='medical_rec_patient_d506f4_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['ordering_doctor', '-scheduled_date'], name='medical_rec_orderin_c6c509_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['study_type'], name='medical_rec_study_t_2d5a47_idx'),
        ),
        migrations.AddIndex(
            model_name='imagingstudy',
            index=models.Index(fields=['status'], name='medical_rec_status_5d952e_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['content_type', 'object_id'], name='medical_rec_content_93a22a_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', '-timestamp'], name='medical_rec_user_id_b48173_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action'], name='medical_rec_action_b03501_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['-timestamp'], name='medical_rec_timesta_96c8b8_idx'),
        ),
    ]
